const PDFDocument = require('pdfkit');
const { parse } = require('json2csv');

// Function to generate a PDF report
const generatePDFReport = async (expenses, username) => {
    return new Promise((resolve, reject) => {
        const doc = new PDFDocument({ margin: 30 });
        const chunks = [];
        doc.on('data', chunk => chunks.push(chunk));
        doc.on('end', () => resolve(Buffer.concat(chunks)));
        doc.on('error', reject); // Catch any errors that occur during PDF generation

        
        doc.fontSize(20).font('Helvetica-Bold').text('Expense Report', { align: 'center' });
        doc.moveDown(1);

        
        doc.fontSize(12).font('Helvetica').text(`Username: ${username}`, { align: 'center' });
        doc.moveDown(1);

    
        doc.fontSize(12).font('Helvetica-Bold');
        const startX = doc.x; 
        doc.text('ID', startX, doc.y, { width: 100 })
            .text('Amount', startX + 100, doc.y, { width: 100 })
            .text('Date', startX + 200, doc.y, { width: 100 });
        doc.moveDown();

        
        doc.fontSize(12).font('Helvetica');
        let totalAmount = 0;
        expenses.forEach(expense => {
            const amount = parseFloat(expense.amount) || 0; 
            doc.text(expense.id, startX, doc.y, { width: 100 })
                .text(amount.toFixed(2), startX + 100, doc.y, { width: 100 }) 
                .text(expense.date, startX + 200, doc.y, { width: 100 });
            totalAmount += amount; 
            doc.moveDown();
        });

        // Total Amount
        doc.moveDown(1);
        doc.fontSize(12).font('Helvetica-Bold').text('Total Amount:', startX + 100, doc.y, { width: 100, continued: true })
            .font('Helvetica').text(totalAmount.toFixed(2), { width: 100 });

        // Footer
        doc.moveDown(2);
        doc.fontSize(10).font('Helvetica-Oblique').text('Generated by Expense Tracker App', { align: 'center' });

        doc.end();
    });
};

// Function to generate a CSV report
const generateCSVReport = async (expenses) => {
    try {
        const csv = parse(expenses, { fields: ['id', 'amount', 'date', 'category', 'notes'] });
        return csv;
    } catch (err) {
        throw new Error('Error generating CSV');
    }
};

module.exports = { generatePDFReport, generateCSVReport };
